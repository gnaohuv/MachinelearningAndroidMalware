import numpy as np
import pandas as pd


def index(comp):
    TP = np.sum((comp["y"] == 1) & (comp["y_preds"] == 1))
    FP = np.sum((comp["y"] == 0) & (comp["y_preds"] == 1))
    TN = np.sum((comp["y"] == 0) & (comp["y_preds"] == 0))
    FN = np.sum((comp["y"] == 1) & (comp["y_preds"] == 0))
    return TP, FP, TN, FN


def Percision(TP, FP):
    return TP / (TP + FP)


def Recall(TP, FN):
    return TP / (TP + FN)


def F1_score(TP, FP, FN):
    return (
        2 * (Percision(TP, FP) * Recall(TP, FN)) / (Percision(TP, FP) + Recall(TP, FN))
    )


def Accuracy(TP, TN, FP, FN):
    return (TP + TN) / (TP + FP + FN + TN)


def Macro_Average(Model, Percision, Recall, F1_score, Accuracy):
    data = {
        "Model": [f"{Model}"],
        "Precision": [f"{Percision*100:.2f}%"],
        "Recall": [f"{Recall*100:.2f}%"],
        "F1_score": [f"{F1_score*100:.2f}%"],
        "Accuracy": [f"{Accuracy*100:.2f}%"],
    }
    return pd.DataFrame(data)


# def Macro_Average1(Percision, Recall, F1_score, Accuracy):
#     data = {
#         "Metric": ["Precision", "Recall", "F1_score", "Accuracy"],
#         "Value": [
#             f"{Percision*100:.2f}%",
#             f"{Recall*100:.2f}%",
#             f"{F1_score*100:.2f}%",
#             f"{Accuracy*100:.2f}%",
#         ],
#     }
#     return pd.DataFrame(data)


def main():
    pass


if __name__ == "__main__":
    main()
